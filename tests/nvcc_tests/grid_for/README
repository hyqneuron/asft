1-block, 1024-thread vector multiply kernel

kernel code:
__global__ void k(int *input, int *output, int count)
{
	int tid = threadIdx.x;
	int nid = blockDim.x;
#pragma unroll 3
	for(int i =tid; i<count; i+=nid)
	{
		output[i]=input[i]*16;
	}
}

Results:
make short   : 22ms
make original: 46ms

Speedup: 2.1x

Optimization methods:
1. so long as input[] and output[] occupy a continuous memory space, variable 'i' can be dropped. input + count*sizeof(int) can be used for limiting the traverse of the loop. This reduces the maintenance needed for the variable 'i' 
2. The calculation on the higher word of addresses is almost always unnecessary. In this case I have ignored it altogether. This may result in errors when the input/output arrays are large enough. A better way is to set the limit of looping at the place right before the higher word increments, and use a separate piece of code to handle the increment in the higher word, so that the calculation of the higher word never goes into the main loop. 
3.When there is no register pressure, more registers can be used to hold addresses so as to increase parallelism inside a loop.
