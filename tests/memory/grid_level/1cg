!Machine 64
!Kernel k
!Param 8 2
!Param 4

//Read memory into a lot of rows
//R0: tid * 4
//R1: row size (nid * 4)
//R2,3: input addr
//R4,5: otput addr

MOV R2, c[0x0][0x20];
MOV R3, c[0x0][0x24];

S2R R0, SR_Tid_X;
ISCADD R2, R0, R2, 2; //R2 = R2 + tid * 4
MOV R1, c[0x0][0x8];
SHL R1, R1, 2; 		//R1 = nid * 4

MOV R0, RZ;
!Label LOOP
!Align 0
LD.E.CG R4, [R2]; IADD R2, R2, R1;
LD.E.CG R5, [R2]; IADD R2, R2, R1;
LD.E.CG R6, [R2]; IADD R2, R2, R1;
LD.E.CG R7, [R2]; IADD R2, R2, R1;
LD.E.CG R8, [R2]; IADD R2, R2, R1;
LD.E.CG R9, [R2]; IADD R2, R2, R1;


LD.E.CG R10, [R2]; IADD R2, R2, R1;
LD.E.CG R11, [R2]; IADD R2, R2, R1;
LD.E.CG R12, [R2]; IADD R2, R2, R1;
LD.E.CG R13, [R2]; IADD R2, R2, R1;

IADD R0, R0, 1;

LD.E.CG R14, [R2]; IADD R2, R2, R1;
LD.E.CG R15, [R2]; IADD R2, R2, R1;
LD.E.CG R16, [R2]; IADD R2, R2, R1;
LD.E.CG R17, [R2]; IADD R2, R2, R1;
LD.E.CG R18, [R2]; IADD R2, R2, R1;
LD.E.CG R19, [R2]; IADD R2, R2, R1;

ISETP.LT P0, pt, R0, 1000;

LD.E.CG R20, [R2]; IADD R2, R2, R1;
LD.E.CG R21, [R2]; IADD R2, R2, R1;
LD.E.CG R22, [R2]; IADD R2, R2, R1;
LD.E.CG R23, [R2]; IADD R2, R2, R1;
LD.E.CG R24, [R2]; IADD R2, R2, R1;
LD.E.CG R25, [R2]; IADD R2, R2, R1;
LD.E.CG R26, [R2]; IADD R2, R2, R1;
LD.E.CG R27, [R2]; IADD R2, R2, R1;
LD.E.CG R28, [R2]; IADD R2, R2, R1;
LD.E.CG R29, [R2]; IADD R2, R2, R1;
LD.E.CG R30, [R2]; IADD R2, R2, R1;
LD.E.CG R31, [R2]; IADD R2, R2, R1;
@P0 BRA !LOOP 

EXIT;

!EndKernel
